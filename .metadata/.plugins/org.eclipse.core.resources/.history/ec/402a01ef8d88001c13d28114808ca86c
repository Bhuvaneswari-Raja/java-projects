package com.pooja;
import java.util.ArrayList;
import java.util.Scanner;

class Searching {
	
	 
	public static void main(String[] args) {
		System.out.println("Test");
		
		Scanner scan = new Scanner(System.in);
		
		
		
		/*
		int[] myArr = new int[5];
		myArr[0] = 10;
		myArr[1] = 15;
		myArr[2] = 20;
		myArr[3] = 25;
		myArr[4] = 30;
		
		System.out.println(myArr[0]);
		
		for(int x = 0; x < myArr.length; x++) {
			System.out.println(myArr[x]);
		}
		*/
		
		/*
		int[] randomArray = randomArray(5,0,20);
		System.out.println("Before sorting");
		
		for(int x = 0; x < randomArray.length; x++) {
			System.out.println(randomArray[x]);
		}
		System.out.println("-----------------------------------------------");
		
		sort(randomArray);
		System.out.println("After sorting");

		for(int x = 0; x < randomArray.length; x++) {
			System.out.println(randomArray[x]);
		}
		System.out.print("Enter a number: ");
		int item  = scan.nextInt();
		System.out.println("----------------linearSearch-----------------------------");
		int indexValue= linearSearch(randomArray, item);
		System.out.println("Index value is: " + indexValue);

			
		System.out.println("----------------binarySearch-----------------------------");
		System.out.print("Enter a number: ");
		int item2  = scan.nextInt();
		int indexValue2 = binarySearch(randomArray, item2);
		System.out.println("Index value is: " + indexValue2);
		
		System.out.println("-----------------------------------------------");

		*/
		Integer[] intArry = new Integer[3];
		intArry[0] =1;
		intArry[1] =6;
		intArry[2] =9;
		System.out.println(intArry);
		
		
		
		ArrayList<Integer> randomList = randomArrayList(10, 5, 50);
		System.out.println(randomList);		
		
	}
	
	
	
	
	
	
	
	
	//Pre: low is less than high; size >= 1
	  //Post: An arrayList has been constructed and returned containing "SIZE" items each randomly choosen between HIGH and LOW
	  //SIZE represents the total desired length of the arrayList, LOW and HIGH represent the lowest and highest possible values for each item in the list
	  public static ArrayList<Integer> randomArrayList(int size, int low, int high) {
	    ArrayList<Integer> list = new ArrayList<Integer>();
	    for (int i = 0; i < size; i++) {
	      list.add((int)((high - low + 1) * Math.random() + low));
	    }
	    return list;
	  }
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		 
	//Pre: The array must be sorted and ordered low to high
	  //Post: If ITEM is in the array, then the index of the element is returned, if not found returns -1
	  public static int binarySearch (int [] array, int item) {
	    //Implements a binary search of an array
	    int low = 0;
	    int high = array.length-1;
	    int midpoint = 0;
	    while (low <= high) {
	      midpoint = (high + low) / 2;
	      if (item == array[midpoint]) {
	        return midpoint;
	      } else if (item > array[midpoint]){
	        low = midpoint + 1;
	      } else {
	        high = midpoint - 1;
	      }
	    }
	    return -1;
	  }
	   
	  
	  
	   //Pre: none
	  //Post: If ITEM is in the array, then the index of the element is returned, if not found returns -1
	  public static int linearSearch (int [] array, int item) {
	    //Implements a linear search of an array
	    for (int i = 0; i < array.length; i++) {
	      if (item == array[i]) {
	        return i;
	      }
	    }
	    return -1;
	  }
	  
	    
	  
	  //Pre: low is less than high; size >= 1
	  //Post: An array has been constructed and returned containing "SIZE" items each randomly choosen between HIGH and LOW
	  //SIZE represents the total desired length of the array, LOW and HIGH represent the lowest and highest possible values for each element in the array
	  public static int[] randomArray(int size, int low, int high) {
	    int [] array = new int[size];
	      for (int i = 0; i < size; i++) {
	        array[i] = (int)((high - low + 1) * Math.random() + low);
	      }
	    return array;
	  }
	  
	   //Pre: none
	  //Post: The array has been sorted low to high
	  public static void sort(int [] array) {
	    for (int i = 0; i < array.length; i++) {
	      for (int j = 0; j < array.length-1; j++) {
	        if (array[j] > array[j+1]) {
	          int temp = array[j];
	          array[j] = array[j+1];
	          array[j+1] = temp;
	        }
	      }
	    }
	  }
	  
	  
	  
	  	  

	  //Pre: none
	  //Post: The ArrayList has been sorted low to high
	  public static void sortArrayList(ArrayList<Integer> list) {
	    for (int i = 0; i < list.size(); i++) {
	      for (int j = 0; j < list.size()-1; j++) {
	        if (list.get(j) > list.get(j+1)) {
	          int temp = list.get(j);
	          list.set(j, list.get(j+1));
	          list.set(j+1, temp);
	        }
	      }
	    }
	  }

	  

	  

	  //Pre: none
	  //Post: If ITEM is in the arrayList, then the index of the item is returned, if not found returns -1
	  public static int linearSearch (ArrayList<Integer> list, int item) {
	  //Implements a linear search of an arrayList
	    return -1;
	  }

	  //Pre: The arrayList must be sorted and ordered low to high
	  //Post: If ITEM is in the arrayList, then the index of the item is returned, if not found returns -1
	  public static int binarySearch (ArrayList<Integer> list, int item) {
	    //Implements a binary search of an arrayList
	    return -1;
	  }
	}
